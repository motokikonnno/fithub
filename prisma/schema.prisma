
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  bio            String?   @default("")
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  repositories   Repository[]
  team_members   TeamMember[]
  folders        Folder[]
  files          File[]
  issues         Issue[]
  mentions       Mention[]
  commits        Commit[]
  curent_commits CurrentCommit[]
  activities     Activity[]
}

model Repository {
  id             String    @id @default(cuid())
  next_issue_id  Int       @default(1)
  name           String
  description    String?
  is_private     Int // 1: パブリック, 2: プライベート
  is_read_me     Boolean
  read_me        String?   @db.LongText
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  user_id        String?
  team_id        String?
  team           Team?     @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user           User?     @relation(fields: [user_id], references: [id])
  folders        Folder[]
  issues         Issue[]
  files          File[]
  commits        Commit[]

  @@index([user_id])
  @@index([team_id])
}

model Folder {
  id            String     @id @default(cuid())
  name          String
  parent_id     String?
  created_at    DateTime   @default(now())
  repository_id String
  user_id       String
  repository    Repository @relation(fields: [repository_id], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [user_id], references: [id])

  @@index([repository_id])
  @@index([user_id])
}

model File {
  id              String          @id @default(cuid())
  name            String
  parent_id       String?
  created_at      DateTime        @default(now())
  repository_id   String
  user_id         String
  repository      Repository      @relation(fields: [repository_id], references: [id], onDelete: Cascade)
  commits         Commit[]
  current_commits CurrentCommit[]
  user            User            @relation(fields: [user_id], references: [id])

  @@index([repository_id])
  @@index([user_id])
}

model Issue {
  id            String     @id @default(cuid())
  issue_number  Int
  title         String
  type          String     @default("To do")
  issue         String     @db.LongText
  created_at    DateTime   @default(now())
  repository_id String
  user_id       String
  user          User       @relation(fields: [user_id], references: [id])
  repository    Repository @relation(fields: [repository_id], references: [id], onDelete: Cascade)
  mention       Mention?

  @@index([repository_id])
  @@index([user_id])
}

model Commit {
  id            String     @id @default(cuid())
  message       String
  body_parts    Int // 1: 胸、 2: 背中、 3: 足、 4: 腕、 5: 肩、 6、腹筋、 7: その他
  created_at    DateTime   @default(now())
  user_id       String
  file_id       String
  team_id       String?
  repository_id String
  repository    Repository  @relation(fields: [repository_id], references: [id], onDelete: Cascade)
  file          File        @relation(fields: [file_id], references: [id], onDelete: Cascade)
  team          Team?       @relation(fields: [team_id], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [user_id], references: [id])
  activities    Activity[]

  @@index([file_id])
  @@index([team_id])
  @@index([user_id])
  @@index([repository_id])
}

model CurrentCommit {
  id            String      @id @default(cuid())
  message       String
  body_parts    Int         // 1: 胸、 2: 背中、 3: 足、 4: 腕、 5: 肩、 6、腹筋、 7: その他
  created_at    DateTime    @default(now())
  user_id       String
  file_id       String
  user          User        @relation(fields: [user_id], references: [id])
  file          File        @relation(fields: [file_id], references: [id], onDelete: Cascade)
  activities    Activity[]

  @@index([file_id])
  @@index([user_id])
}

model Team {
  id              String         @id @default(cuid())
  name            String
  bio             String?
  image           String
  created_at      DateTime       @default(now())
  repositories    Repository[]
  team_members    TeamMember[]
  commits         Commit[]
  team_invitation TeamInvitation[]
}

model TeamMember {
  id             String         @id @default(cuid())
  user_id        String
  team_id        String
  owner          Boolean        @default(false)
  created_at     DateTime       @default(now())
  user           User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  team           Team           @relation(fields: [team_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([team_id])
}

model Mention {
  id                       String         @id @default(cuid())
  issue_id                 String         @unique
  mentioner_id             String
  created_at               DateTime       @default(now())
  mentioned_user_id        String
  user                     User           @relation(fields: [mentioned_user_id], references: [id])
  issue                    Issue          @relation(fields: [issue_id], references: [id], onDelete: Cascade)
  activities               Activity[]

  @@index([mentioned_user_id])
  @@index([issue_id])
}

model TeamInvitation {
  id            String        @id @default(cuid())
  invitee_email String
  inviter_name  String
  team_id       String
  created_at    DateTime      @default(now())
  team          Team          @relation(fields: [team_id], references: [id], onDelete: Cascade)
  activities    Activity[]

  @@index([team_id])
}

model Activity {
  id                String         @id @default(cuid())
  body              String
  created_at        DateTime       @default(now())
  commit_id         String?
  mention_id        String?
  current_commit_id String?
  user_id           String
  invitation_id     String?
  commit            Commit?         @relation(fields: [commit_id], references: [id])
  mention           Mention?        @relation(fields: [mention_id], references: [id])
  current_commit    CurrentCommit?  @relation(fields: [current_commit_id], references: [id])
  user              User            @relation(fields: [user_id], references: [id])
  invitation        TeamInvitation? @relation(fields: [invitation_id], references: [id])

  @@index([commit_id])
  @@index([mention_id])
  @@index([current_commit_id])
  @@index([user_id])
  @@index([invitation_id])
}